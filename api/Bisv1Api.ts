/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class Bisv1Api {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Nouda yritys- ja yhteisötietojärjestelmään merkitty yritys Y-tunnuksen avulla
     * @param businessId Tarkka Y-tunnus
     */
    public get(businessId: string, extraHttpRequestParams?: any): Observable<models.BisCompanyDetails> {
        return this.getWithHttpInfo(businessId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Hae yritys- ja yhteisötietojärjestelmään merkittyjä yrityksiä hakutermien avulla
     * @param totalResults Jos arvoksi valitaan true, hakutuloksen kokonaismäärä sisältyy tuloksiin totalResults-arvona. Muussa tapauksessa totalResults-arvo asetetaan arvoksi -1
     * @param maxResults Tulosten enimmäismääränä on annettu luku
     * @param resultsFrom Tuloksena annetaan ne tulokset, jotka alkavat annetulla numerolla
     * @param name  Yrityksen nimi tai sen alkuosa
     * @param businessId Y-tunnus
     * @param registeredOffice  Yrityksen kotipaikka suomeksi tai ruotsiksi. Oltava tarkka vastine.
     * @param streetAddressPostCode Company&#39;s registered visiting address postcode
     * @param companyForm Yritysmuoto
     * @param businessLine Toimiala tai sen alkuosa millä tahansa kielellä.
     * @param businessLineCode &lt;a href&#x3D;\&quot;http://www.stat.fi/meta/luokitukset/toimiala/001-2008/index.html\&quot;&gt; Toimialakoodi&lt;/a&gt; tai sen alkuosa
     * @param companyRegistrationFrom  Yrityksen Y-tunnuksen rekisteröintiajankohta alkaen (ISO 8601 Helsinki muodossa)
     * @param companyRegistrationTo  Yrityksen rekisteröintiajankohta päättyen (ISO 8601 Helsinki muodossa)
     */
    public search(totalResults?: string, maxResults?: string, resultsFrom?: string, name?: string, businessId?: string, registeredOffice?: string, streetAddressPostCode?: string, companyForm?: string, businessLine?: string, businessLineCode?: string, companyRegistrationFrom?: string, companyRegistrationTo?: string, extraHttpRequestParams?: any): Observable<models.BisCompany> {
        return this.searchWithHttpInfo(totalResults, maxResults, resultsFrom, name, businessId, registeredOffice, streetAddressPostCode, companyForm, businessLine, businessLineCode, companyRegistrationFrom, companyRegistrationTo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Nouda yritys- ja yhteisötietojärjestelmään merkitty yritys Y-tunnuksen avulla
     * 
     * @param businessId Tarkka Y-tunnus
     */
    public getWithHttpInfo(businessId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bis/v1/${businessId}'
                    .replace('${' + 'businessId' + '}', String(businessId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'businessId' is not null or undefined
        if (businessId === null || businessId === undefined) {
            throw new Error('Required parameter businessId was null or undefined when calling get.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Hae yritys- ja yhteisötietojärjestelmään merkittyjä yrityksiä hakutermien avulla
     * 
     * @param totalResults Jos arvoksi valitaan true, hakutuloksen kokonaismäärä sisältyy tuloksiin totalResults-arvona. Muussa tapauksessa totalResults-arvo asetetaan arvoksi -1
     * @param maxResults Tulosten enimmäismääränä on annettu luku
     * @param resultsFrom Tuloksena annetaan ne tulokset, jotka alkavat annetulla numerolla
     * @param name  Yrityksen nimi tai sen alkuosa
     * @param businessId Y-tunnus
     * @param registeredOffice  Yrityksen kotipaikka suomeksi tai ruotsiksi. Oltava tarkka vastine.
     * @param streetAddressPostCode Company&#39;s registered visiting address postcode
     * @param companyForm Yritysmuoto
     * @param businessLine Toimiala tai sen alkuosa millä tahansa kielellä.
     * @param businessLineCode &lt;a href&#x3D;\&quot;http://www.stat.fi/meta/luokitukset/toimiala/001-2008/index.html\&quot;&gt; Toimialakoodi&lt;/a&gt; tai sen alkuosa
     * @param companyRegistrationFrom  Yrityksen Y-tunnuksen rekisteröintiajankohta alkaen (ISO 8601 Helsinki muodossa)
     * @param companyRegistrationTo  Yrityksen rekisteröintiajankohta päättyen (ISO 8601 Helsinki muodossa)
     */
    public searchWithHttpInfo(totalResults?: string, maxResults?: string, resultsFrom?: string, name?: string, businessId?: string, registeredOffice?: string, streetAddressPostCode?: string, companyForm?: string, businessLine?: string, businessLineCode?: string, companyRegistrationFrom?: string, companyRegistrationTo?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bis/v1';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (totalResults !== undefined) {
            queryParameters.set('totalResults', <any>totalResults);
        }

        if (maxResults !== undefined) {
            queryParameters.set('maxResults', <any>maxResults);
        }

        if (resultsFrom !== undefined) {
            queryParameters.set('resultsFrom', <any>resultsFrom);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (businessId !== undefined) {
            queryParameters.set('businessId', <any>businessId);
        }

        if (registeredOffice !== undefined) {
            queryParameters.set('registeredOffice', <any>registeredOffice);
        }

        if (streetAddressPostCode !== undefined) {
            queryParameters.set('streetAddressPostCode', <any>streetAddressPostCode);
        }

        if (companyForm !== undefined) {
            queryParameters.set('companyForm', <any>companyForm);
        }

        if (businessLine !== undefined) {
            queryParameters.set('businessLine', <any>businessLine);
        }

        if (businessLineCode !== undefined) {
            queryParameters.set('businessLineCode', <any>businessLineCode);
        }

        if (companyRegistrationFrom !== undefined) {
            queryParameters.set('companyRegistrationFrom', <any>companyRegistrationFrom);
        }

        if (companyRegistrationTo !== undefined) {
            queryParameters.set('companyRegistrationTo', <any>companyRegistrationTo);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
